<?php

/**
 *
 * PHP Pro Bid
 *
 * @link        http://www.phpprobid.com
 * @copyright   Copyright (c) 2019 Online Ventures Software & CodeCube SRL
 * @license     http://www.phpprobid.com/license Commercial License
 *
 * @version     8.2 [rev.8.2.02]
 */

/**
 * abstract service class
 */

namespace Ppb\Service;

use Cube\Db\Table\AbstractTable,
    Cube\Controller\Front,
    Cube\Translate,
    Cube\Translate\Adapter\AbstractAdapter as TranslateAdapter,
    Cube\Db\Expr,
    Ppb\Db\Table\Row\User as UserModel;

abstract class AbstractService
{

    /**
     *
     * status messages pluralize keys
     */
    const STM_SINGULAR = 'singular';
    const STM_PLURAL = 'plural';

    /**
     *
     * the table that is handled through the service
     *
     * @var \Cube\Db\Table\AbstractTable
     */
    protected $_table;

    /**
     *
     * settings array
     *
     * @var array
     */
    protected $_settings;

    /**
     *
     * logged in user model / payer for site fees service classes
     *
     * @var \Ppb\Db\Table\Row\User
     */
    protected $_user;

    /**
     *
     * translate adapter
     *
     * @var \Cube\Translate\Adapter\AbstractAdapter
     */
    protected $_translate;

    /**
     *
     * cache id for query caching (column / where)
     *
     * @var mixed
     */
    protected $_cacheId = null;

    /**
     *
     * status message generated by the Rowset\AbstractStatus::changeStatus() method
     *
     * @var array
     */
    protected $_statusMessages = array();

    public function __construct()
    {

    }

    /**
     *
     * set the table that will be used by the service
     *
     * @param \Cube\Db\Table\AbstractTable $table
     *
     * @return $this
     * @throws \InvalidArgumentException
     */
    public function setTable($table = null)
    {
        if (!$table instanceof AbstractTable) {
            throw new \InvalidArgumentException('The table must be an instance of \Cube\Db\Table\AbstractTable');
        }

        $this->_table = $table;

        return $this;
    }

    /**
     *
     * get the table that is to be used by the service
     *
     * @return \Cube\Db\Table\AbstractTable
     */
    public function getTable()
    {
        return $this->_table;
    }

    /**
     *
     * get settings array
     *
     * @return array
     */
    public function getSettings()
    {
        if (!is_array($this->_settings)) {
            $this->setSettings(
                Front::getInstance()->getBootstrap()->getResource('settings'));
        }

        return $this->_settings;
    }

    /**
     *
     * set settings array
     *
     * @param array $settings
     *
     * @return $this
     */
    public function setSettings(array $settings)
    {
        $this->_settings = $settings;

        return $this;
    }

    /**
     *
     * get user
     *
     * @return \Ppb\Db\Table\Row\User
     */
    public function getUser()
    {
        if ($this->_user === null) {
            $user = Front::getInstance()->getBootstrap()->getResource('user');

            if ($user instanceof UserModel) {
                $this->setUser($user);
            }
        }

        return $this->_user;
    }

    /**
     *
     * set user
     *
     * @param \Ppb\Db\Table\Row\User $user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->_user = $user;

        return $this;
    }

    /**
     *
     * set translate adapter
     *
     * @param \Cube\Translate\Adapter\AbstractAdapter $translate
     *
     * @return $this
     */
    public function setTranslate(TranslateAdapter $translate)
    {
        $this->_translate = $translate;

        return $this;
    }

    /**
     *
     * get translate adapter
     *
     * @return \Cube\Translate\Adapter\AbstractAdapter
     */
    public function getTranslate()
    {
        if (!$this->_translate instanceof TranslateAdapter) {
            $translate = Front::getInstance()->getBootstrap()->getResource('translate');
            if ($translate instanceof Translate) {
                $this->setTranslate(
                    $translate->getAdapter());
            }
        }

        return $this->_translate;
    }

    /**
     *
     * get cache id
     *
     * @return mixed
     */
    public function getCacheId()
    {
        return $this->_cacheId;
    }

    /**
     *
     * set cache id
     *
     * @param mixed $cacheId
     *
     * @return $this
     */
    public function setCacheId($cacheId)
    {
        $this->_cacheId = $cacheId;

        return $this;
    }

    /**
     *
     * get status message
     *
     * @param string $status
     * @param int    $counter
     *
     * @return string|null
     */
    public function getStatusMessage($status, $counter)
    {

        if (array_key_exists($status, $this->_statusMessages)) {
            $translate = $this->getTranslate();

            $statusMessage = ($counter === 1) ? $this->_statusMessages[$status][self::STM_SINGULAR] : $this->_statusMessages[$status][self::STM_PLURAL];

            return $translate->_($statusMessage);
        }

        return $status;
    }

    /**
     *
     * fetches all matched rows
     * is overwritten by certain service classes
     *
     * @param string|\Cube\Db\Select $where SQL where clause, or a select object
     * @param string|array           $order
     * @param int                    $count
     * @param int                    $offset
     *
     * @return \Cube\Db\Table\Rowset\AbstractRowset
     */
    public function fetchAll($where = null, $order = null, $count = null, $offset = null)
    {
        return $this->_table->fetchAll($where, $order, $count, $offset, $this->getCacheId());
    }

    /**
     *
     * find a row on the table by querying a certain column
     *
     * @param string $name  column name
     * @param string $value column value
     *
     * @return \Cube\Db\Table\Row\AbstractRow|null
     */
    public function findBy($name, $value)
    {
        if ($value === null) {
            return null;
        }

        return $this->_table->fetchRow(
            $this->_table->select()->where("{$name} = ?", $value), null, null, $this->getCacheId());
    }

    /**
     *
     * create or update a table row
     *
     * @param array $data
     *
     * @return $this
     */
    public function save($data)
    {
        $row = null;

        $table = $this->getTable();
        $tableColumns = $table->info(AbstractTable::COLS);

        $data = $this->_prepareSaveData($data);

        if (!empty($data['id'])) {
            $select = $table->select()
                ->where("id = ?", $data['id']);

            $row = $table->fetchRow($select);
        }

        if ($row !== null) {
            if (in_array('updated_at', $tableColumns)) {
                $data['updated_at'] = new Expr('now()');
            }

            $table->update($data, $table->getAdapter()->quoteInto('id = ?', $row['id']));
        }
        else {
            if (in_array('created_at', $tableColumns)) {
                $data['created_at'] = new Expr('now()');
            }

            $table->insert($data);
        }

        return $this;
    }

    /**
     *
     * delete a row from the table
     *
     * @param mixed $id the id of the row to be deleted
     *
     * @return int     returns the number of affected rows
     */
    public function delete($id)
    {
        $table = $this->getTable();
        $adapter = $table->getAdapter();

        $where[] = $adapter->quoteInto('id IN (?)', $id);

        return $table->delete($where);
    }

    /**
     *
     * prepares data for an insert or update operation, by removing any keys that
     * do not correspond to columns in the selected table
     * serialize all arrays before saving them in the database
     *
     * @8.2 - MOVED TO AbstractTable class.
     *
     * @param array $data
     *
     * @return array
     */
    protected function _prepareSaveData($data = array())
    {
        return $data;
    }

    /**
     *
     * round a number to the required number of decimals
     * multiply by 10^$round, then get the floor value of that amount then divide by 10^round
     *
     * @param float $number
     * @param int   $decimals
     *
     * @return float
     */
    protected function _roundNumber($number, $decimals = 2)
    {
        $value = $number * pow(10, $decimals);
        $value = (!strpos($value, '.')) ? $value : floor($value);
        $number = $value / pow(10, $decimals);

        return $number;
    }

    /**
     *
     * dummy function used as a placeholder for translatable sentences
     *
     * @param $string
     *
     * @return mixed
     */
    protected function _($string)
    {
        return $string;
    }

}


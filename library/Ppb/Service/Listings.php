<?php

/**
 *
 * PHP Pro Bid
 *
 * @link        http://www.phpprobid.com
 * @copyright   Copyright (c) 2020 Online Ventures Software & CodeCube SRL
 * @license     http://www.phpprobid.com/license Commercial License
 *
 * @version     8.2 [rev.8.2.02]
 */

/**
 * listings table service class
 */

namespace Ppb\Service;

use Cube\Controller\Front,
    Cube\Db\Expr,
    Ppb\Service,
    Ppb\Db\Table,
    Ppb\Form\Element\StockLevels,
    Ppb\Form\Element\Range,
    Ppb\Db\Table\Row\Listing as ListingModel,
    Ppb\Db\Table\Row\User as UserModel,
    Ppb\Model\Shipping as ShippingModel;

class Listings extends AbstractService
{

    /**
     * number of seconds in a day
     */
    const DAY_SECONDS = 86400;

    /**
     * listings browse statuses
     */
    const STATUS_OPEN = 'open';
    const STATUS_CLOSE = 'close';
    const STATUS_RELIST = 'relist';
    const STATUS_DRAFTS_LIST = 'draftsList';
    const STATUS_ACTIVATE = 'activate';
    const STATUS_SUSPEND = 'suspend';
    const STATUS_APPROVE = 'approve';
    const STATUS_UNDELETE = 'undelete';
    const STATUS_DELETE = 'delete';

    /**
     * custom fields tables "type" column
     */
    const CUSTOM_FIELDS_TYPE = 'item';

    /**
     *
     * status message generated by the changeStatus() method
     *
     * @var array
     */
    protected $_statusMessages = array(
        self::STATUS_OPEN        => array(
            self::STM_SINGULAR => "%s listing has been opened.",
            self::STM_PLURAL   => "%s listings have been opened.",
        ),
        self::STATUS_CLOSE       => array(
            self::STM_SINGULAR => "%s listing has been closed.",
            self::STM_PLURAL   => "%s listings have been closed.",
        ),
        self::STATUS_RELIST      => array(
            self::STM_SINGULAR => "%s listing has been relisted.",
            self::STM_PLURAL   => "%s listings have been relisted.",
        ),
        self::STATUS_DRAFTS_LIST => array(
            self::STM_SINGULAR => "%s draft has been listed.",
            self::STM_PLURAL   => "%s drafts have been listed.",
        ),
        self::STATUS_ACTIVATE    => array(
            self::STM_SINGULAR => "%s listing has been activated.",
            self::STM_PLURAL   => "%s listings have been activated.",
        ),
        self::STATUS_SUSPEND     => array(
            self::STM_SINGULAR => "%s listing has been suspended.",
            self::STM_PLURAL   => "%s listings have been suspended.",
        ),
        self::STATUS_APPROVE     => array(
            self::STM_SINGULAR => "%s listing has been approved.",
            self::STM_PLURAL   => "%s listings have been approved.",
        ),
        self::STATUS_UNDELETE    => array(
            self::STM_SINGULAR => "%s listing has been undeleted.",
            self::STM_PLURAL   => "%s listings have been undeleted."
        ),
        self::STATUS_DELETE      => array(
            self::STM_SINGULAR => "%s listing has been deleted.",
            self::STM_PLURAL   => "%s listings have been deleted.",
        ),
    );

    /**
     * select options
     */
    const SELECT_SIMPLE = 'simple';
    const SELECT_LISTINGS = 'listings';
    const SELECT_COUNTER = 'counter';
    const SELECT_MEMBERS = 'members';

    /**
     *
     * listings select types
     *
     * @var array
     */
    protected $_selectTypes = array(
        self::SELECT_SIMPLE,
        self::SELECT_LISTINGS,
        self::SELECT_COUNTER,
        self::SELECT_MEMBERS,
    );

    /**
     *
     * listings media (images etc) table service
     *
     * @var \Ppb\Service\ListingsMedia
     */
    protected $_listingsMedia;

    /**
     *
     * custom fields data table service
     *
     * @var \Ppb\Service\CustomFieldsData
     */
    protected $_customFieldsData;

    /**
     *
     * listing types available
     * allowed: auction, product, wanted, reverse, first_bidder
     *
     * @var array
     */
    protected $_listingTypes = array();

    /**
     *
     * select method params
     *
     * @var array
     */
    protected $_selectParams = array();

    /**
     *
     * class constructor
     */
    public function __construct()
    {
        parent::__construct();

        $this->setTable(
            new Table\Listings());
    }

    /**
     *
     * get custom fields data service
     *
     * @return \Ppb\Service\CustomFieldsData
     */
    public function getCustomFieldsDataService()
    {
        if (!$this->_customFieldsData instanceof Service\CustomFieldsData) {
            $this->setCustomFieldsDataService(
                new Service\CustomFieldsData());
        }

        return $this->_customFieldsData;
    }

    /**
     *
     * set custom fields data service
     *
     * @param \Ppb\Service\CustomFieldsData $customFieldsData
     *
     * @return \Ppb\Service\Listings
     */
    public function setCustomFieldsDataService(Service\CustomFieldsData $customFieldsData)
    {
        $this->_customFieldsData = $customFieldsData;

        return $this;
    }

    /**
     *
     * get listings media service
     *
     * @return \Ppb\Service\ListingsMedia
     */
    public function getListingsMedia()
    {
        if (!$this->_listingsMedia instanceof Service\ListingsMedia) {
            $this->setListingsMedia(
                new Service\ListingsMedia());
        }

        return $this->_listingsMedia;
    }

    /**
     *
     * set the listings media service
     *
     * @param \Ppb\Service\ListingsMedia $listingsMedia
     *
     * @return $this
     */
    public function setListingsMedia(Service\ListingsMedia $listingsMedia)
    {
        $this->_listingsMedia = $listingsMedia;

        return $this;
    }


    /**
     *
     * get item types
     *
     * @return array
     */
    public function getListingTypes()
    {
        if (empty($this->_listingTypes)) {
            $this->setListingTypes();
        }

        return $this->_listingTypes;
    }

    /**
     *
     * set listing types array
     *
     * @param array $listingTypes
     *
     * @return $this
     */
    public function setListingTypes(array $listingTypes = null)
    {
        $translate = $this->getTranslate();

        if ($listingTypes === null) {
            $settings = $this->getSettings();

            if ($settings['enable_auctions']) {
                $listingTypes['auction'] = $translate->_('Auction');
            }

            if ($settings['enable_products']) {
                $listingTypes['product'] = $translate->_('Product');
            }

            if ($settings['enable_classifieds']) {
                $listingTypes['classified'] = $translate->_('Classified');
            }
        }

        $this->_listingTypes = $listingTypes;

        return $this;
    }

    /**
     *
     * get select params
     *
     * @return array
     */
    public function getSelectParams()
    {
        return $this->_selectParams;
    }

    /**
     *
     * set select params
     *
     * @param array $selectParams
     *
     * @return $this
     */
    public function setSelectParams($selectParams)
    {
        $this->_selectParams = $selectParams;

        return $this;
    }

    /**
     *
     * saves a listing (create or update)
     * will save data to any linked tables as well (like images, videos etc)
     * will also save shipping options serialized array
     *
     * 'partial' flag =    set by any methods that might use the save method and which shouldn't alter flags
     *                      that are altered only when creating or editing the listing
     *
     * if the item has been edited and was already counted, subtract the category counters and reset the count flag
     *
     * @param array $post post array to be saved in the listings table
     *
     * @return int              the id of the listing that was saved
     */
    public function save($post)
    {
        $row = null;
        $user = $this->getUser();

        $data = $this->_prepareSaveData($post);

        if (isset($user['id'])) {
            $data['user_id'] = $user['id'];
        }

        if (array_key_exists('id', $data)) {
            $select = $this->_table->select()
                ->where("id = ?", $data['id']);

            if (isset($data['user_id'])) {
                $select->where("user_id = ?", $data['user_id']);
            }

            $row = $this->findBy('id', $data['id'], false, true);

            unset($data['id']);
        }

        if (!isset($post['partial'])) {
            if (!$user->isAdmin()) {
                $data['approved'] = $this->_setApprovedFlag();
            }

            $postageSettings = array();

            foreach (ShippingModel::$postageFields as $key => $value) {
                if (isset($post[$key])) {
                    $postageSettings[$key] = \Ppb\Utility::unserialize($post[$key]);
                }
            }

            // workaround for bulk lister dimensions field
            if (!empty($post['dimensions'])) {
                $dimensions = (array)$post['dimensions'];

                if (count($dimensions) == 3 && !array_key_exists(ShippingModel::DIMENSION_LENGTH, $dimensions)) {
                    $dimensions = array(
                        ShippingModel::DIMENSION_LENGTH => $dimensions[0],
                        ShippingModel::DIMENSION_WIDTH  => $dimensions[1],
                        ShippingModel::DIMENSION_HEIGHT => $dimensions[2],
                    );
                }

                $postageSettings['dimensions'] = $dimensions;
            }

            $data['postage_settings'] = serialize($postageSettings);
        }

        $id = null;
        if ($row instanceof ListingModel) {
            $data['rollback_data'] = serialize($row);

            if (
                $row->isActiveAndOpen() &&
                $row->getData('list_in') != 'store' &&
                $row['last_count_operation'] == ListingModel::COUNT_OP_ADD
            ) {
                $row->countCategoriesCounter(ListingModel::COUNT_OP_SUBTRACT);
                $data['last_count_operation'] = ListingModel::COUNT_OP_NONE;
            }

            $data['updated_at'] = new Expr('now()');
            unset($data['user_id']);

            $this->_table->update($data, "id='{$row['id']}'");
            $id = $row['id'];
        }
        else if (!isset($post['partial'])) {
            $data['created_at'] = new Expr('now()');

            $this->_table->insert($data);
            $id = $this->_table->getAdapter()->lastInsertId();
        }

        if (!isset($post['partial'])) {
            // save all media corresponding to the listing in the listings_media table
            $this->getListingsMedia()->save($id, $post);

            // save custom fields data in the custom_fields_data table
            foreach ($post as $key => $value) {
                if (strstr($key, 'custom_field_')) {
                    $fieldId = str_replace('custom_field_', '', $key);
                    $this->getCustomFieldsDataService()->save(
                        $value, self::CUSTOM_FIELDS_TYPE, $fieldId, $id);
                }
            }
        }

        return $id;
    }

    /**
     *
     * find a row on the listings table by querying a certain column
     * if it exists, fetch all linked data:
     * - media (images, etc)
     * - custom fields
     * - postage settings (unserialize from the field)
     *
     * @param string $name      column name
     * @param string $value     column value
     * @param bool   $strict    if set to true, it will return the listing only if
     *                          the owner is the currently logged in user.
     * @param bool   $enhanced  if set to true, it will retrieve all related data as an array
     *
     * @return \Ppb\Db\Table\Row\Listing|null
     */
    public function findBy($name, $value, $strict = false, $enhanced = false)
    {
        $where = $this->getTable()->getAdapter()->quoteInto("{$name} = ?", $value);

        /** @var \Ppb\Db\Table\Row\Listing $listing */
        $listing = $this->fetchAll($where, null, null, null, $strict, $enhanced)->getRow(0);

        return $listing;
    }


    /**
     *
     * fetches all matched rows
     *
     * @param string|\Cube\Db\Select $where    SQL where clause, or a select object
     * @param string|array           $order
     * @param int                    $count
     * @param int                    $offset
     * @param bool                   $strict   if set to true, it will return the listing only if
     *                                         the owner is the currently logged in user.
     * @param bool                   $enhanced if set to true, it will retrieve all related data as an array
     *
     * @return \Ppb\Db\Table\Rowset\Listings
     */
    public function fetchAll($where = null, $order = null, $count = null, $offset = null, $strict = false, $enhanced = false)
    {
        /** @var \Ppb\Db\Table\Rowset\Listings $listings */
        $listings = parent::fetchAll($where, $order, $count, $offset);
        $user = $this->getUser();

        /** @var \Ppb\Db\Table\Row\Listing $listing */
        foreach ($listings as $key => $listing) {
            if ($strict === true && $listing['user_id'] != $user['id']) {
                $listings[$key] = null;
            }
            else if ($enhanced === true) {
                // listing media formatted data
                /** @var \Ppb\Db\Table\Rowset\ListingsMedia $listingsMediaRowset */
                $listingsMediaRowset = $listing->findDependentRowset('\Ppb\Db\Table\ListingsMedia', null,
                    $this->getTable()->select()->order('order_id ASC'));

                $listingsMedia = $listingsMediaRowset->getFormattedData();
                foreach ($listingsMedia as $k => $v) {
                    $listing[$k] = $v;
                }

                // custom fields data
                $customFieldsData = $this->getCustomFieldsData($listing['id']);
                foreach ($customFieldsData as $k => $v) {
                    $listing['custom_field_' . $k] = $v;
                }

                $listings[$key] = $listing;
            }
        }

        return $listings;
    }

    /**
     *
     * creates and returns a new \Cube\Db\Select object used for selecting listings
     *
     * @param string $selectType the type of select to be created - simple, admin, members, listings
     * @param array  $params
     *
     * @return \Cube\Db\Select
     * @throws \InvalidArgumentException
     */
    public function select($selectType = self::SELECT_SIMPLE, array $params = null)
    {
        if (!in_array($selectType, $this->_selectTypes)) {
            throw new \InvalidArgumentException(
                sprintf("Invalid select type submitted. Allowed types: %s", implode(', ', $this->_selectTypes)));
        }

        $user = $this->getUser();
        $settings = $this->getSettings();

        $categoriesFilter = array(0);


        ## INITIALIZE USABLE VARIABLES
        $this->setSelectParams($params);

        $listingId = $this->_getParam('listing_id');
        $keywords = $this->_getParam('keywords');
        $parentId = $this->_getParam('parent_id');
        $userId = (int)$this->_getParam('user_id');
        $storeId = (int)$this->_getParam('store_id');
        $filters = (array)$this->_getParam('filter');
        $sort = $this->_getParam('sort');
        $price = (array)$this->_getParam('price');
        $showOnly = (array)$this->_getParam('show_only');
        $listingType = (array)$this->_getParam('listing_type');
        $country = $this->_getParam('country');
        $currentListingId = (int)$this->_getParam('current_listing_id');
        $storeSlug = $this->_getParam('store_slug');

        ## logged in user to be used in queries where we do not want to select listings by their owner
        $loggedInUserId = (!empty($user)) ? $user['id'] : null;
        ## /INITIALIZE USABLE VARIABLES


        ## INITIALIZE SELECT OBJECT
        $select = $this->getTable()->getAdapter()
            ->select()
            ->from(array('l' => 'listings'), '*');
        ## /INITIALIZE SELECT OBJECT


        ## GET USER ID FROM STORE SLUG
        if ($storeSlug) {
            $usersService = new Users();
            $store = $usersService->findBy('store_slug', $storeSlug);
            if (!empty($store['id'])) {
                $storeId = $store['id'];
            }
        }
        ## /GET USER ID FROM STORE SLUG


        ## STORE ID
        if ($storeId) {
            $select->where('l.user_id = ?', $storeId);
            array_push($filters, 'in-store');
        }
        ## /STORE ID


        ## SELECT TYPE
        switch ($selectType) {
            case self::SELECT_LISTINGS:
            case self::SELECT_COUNTER:
                if (!array_intersect($filters, array('open', 'closed', 'scheduled'))) {
                    array_push($filters, 'active');
                    if (!in_array('sold', $showOnly)) {
                        array_push($filters, 'open');
                    }
                }

                if (!in_array('in-store', $filters)) {
                    array_push($filters, 'in-site');
                }

                if ($settings['store_only_mode'] && $settings['store_only_mode_disable_listings']) {
                    array_push($filters, 'active-store');
                }
                break;
            case self::SELECT_MEMBERS:
                $userId = $user['id'];
                break;
            case self::SELECT_SIMPLE:
                break;
        }
        ## /SELECT TYPE


        ## LISTING ID
        if ($listingId) {
            $select->where('l.id = ?', $listingId);
        }
        ## /LISTING ID


        ## USER ID
        if ($userId) {
            $select->where('l.user_id = ?', $userId);
        }
        ## /USER ID


        ## USER TOKEN
        /** @var \Cube\Session $session */
        $session = Front::getInstance()->getBootstrap()->getResource('session');
        $userToken = strval($session->getCookie(UserModel::USER_TOKEN));
        ## /USER TOKEN


        ## KEYWORDS
        if ($keywords) {
            $formattedKeywords = '%' . str_replace(' ', '%', $keywords) . '%';
            if (is_numeric($keywords)) {
                $select->where('(l.id = "' . intval($keywords) . '" OR l.name LIKE "' . $formattedKeywords . '" OR l.short_description LIKE "' . $formattedKeywords . '")');
            }
            else {
                $keywords = explode(' ', $keywords);
                $conditions = array();

                $conditions[] = 'l.name LIKE "%1$s"';

                if ($settings['search_description']) {
                    $conditions[] = 'l.description LIKE "%1$s"';
                }
                if ($settings['search_category_name']) {
                    $select->joinLeft(array('mc' => 'categories'), 'mc.id = l.category_id', 'mc.full_name AS main_category_name');
                    $conditions[] = 'mc.full_name LIKE "%1$s"';

                    if ($settings['addl_category_listing']) {
                        $select->joinLeft(array('ac' => 'categories'), 'ac.id = l.addl_category_id', 'ac.full_name AS addl_category_name');
                        $conditions[] = 'ac.full_name LIKE "%1$s"';
                    }
                }

                $cond = implode(' OR ', $conditions);

                foreach ((array)$keywords as $keyword) {
                    $select->where('(' . sprintf($cond, '%' . $keyword . '%') . ')');
                }
            }
        }
        ## /KEYWORDS


        ## CATEGORY ID AND SUBCATEGORIES
        if ($parentId) {
            $categoriesService = new Service\Table\Relational\Categories();

            $categoriesIds = array_keys($categoriesService->getChildren($parentId, true));

            if ($settings['addl_category_listing']) {
                $select->where('l.category_id IN (?) OR l.addl_category_id IN (?)', $categoriesIds);
            }
            else {
                $select->where('l.category_id IN (?)', $categoriesIds);
            }

            $categoriesFilter = array_merge($categoriesFilter, array_keys(
                $categoriesService->getBreadcrumbs($parentId)));
        }
        // @7.9: if no category is selected, do not display items from adult categories
        else if ($selectType == self::SELECT_LISTINGS) {
            if ($settings['enable_adult_categories']) {
                $select->joinLeft(array('mct' => 'categories'), "l.category_id = mct.id", 'mct.adult')
                    ->where('mct.adult = ? OR mct.adult is null', 0);

                if ($settings['addl_category_listing']) {
                    $select->joinLeft(array('act' => 'categories'), "l.addl_category_id = act.id", 'act.adult')
                        ->where('act.adult = ? OR act.adult is null', 0);
                }
            }
        }
        ## /CATEGORY ID AND SUBCATEGORIES


        ## SEARCH PAGE PARAMS
        ## :PRICE RANGE
        $priceFrom = isset($price[Range::RANGE_FROM]) ? doubleval($price[Range::RANGE_FROM]) : null;
        $priceTo = isset($price[Range::RANGE_TO]) ? doubleval($price[Range::RANGE_TO]) : null;

        if ($priceFrom > 0 || $priceTo > 0 || in_array($sort, array('price_asc', 'price_desc'))) {
            $select->joinLeft(array('b' => 'bids'), 'b.listing_id = l.id', new Expr('max(b.amount) as current_bid'))
                ->group('l.id');

            if ($priceFrom > 0) {
                $select->having('IF(l.listing_type=\'auction\', IF(current_bid is null, l.start_price, current_bid), l.buyout_price) >= ?', $priceFrom);
            }
            if ($priceTo > 0) {
                $select->having('IF(l.listing_type=\'auction\', IF(current_bid is null, l.start_price, current_bid), l.buyout_price) <= ?', $priceTo);

            }
        }

        ## /:PRICE RANGE


        ## :SHOW ONLY
        if (in_array('sold', $showOnly)) {
            array_push($filters, 'sold');
        }
        if (in_array('accept_returns', $showOnly)) {
            $select->where('l.postage_settings LIKE ?', '%s:14:"accept_returns";s:1:"1"%');
        }
        if (in_array('make_offer', $showOnly)) {
            $select->where('l.enable_make_offer = ?', 1);
        }
        ## /:SHOW ONLY


        ## :LISTING TYPE
        $listingType = array_filter($listingType);
        if (empty($listingType) || in_array('all', (array)$listingType)) {
            $listingType = array_keys($this->getListingTypes());
        }
        $select->where("l.listing_type IN (?)", $listingType);
        ## /:LISTING TYPE


        ## :COUNTRY
        if ($country) {
            $select->where('l.country = ?', (int)$country);
        }
        ## /:COUNTRY
        ## /SEARCH PAGE PARAMS


        ## FILTER
        // just filters data, doesnt order it
        $filters = array_unique($filters);

        $select->where('l.draft = ?', in_array('drafts', $filters) ? 1 : 0);

        foreach ($filters as $filter) {
            switch ($filter) {
                case 'active':
                    $select->where('l.active = ?', 1)
                        ->where('l.approved = ?', 1);
                    break;
                case 'open':
                    $select->where('l.closed = ?', 0)
                        ->where('l.deleted = ?', 0);
                    break;
                case 'closed':
                    $select->where('l.closed = ?', 1)
                        ->where('l.deleted = ?', 0)
                        ->where('l.end_time <= ?', new Expr('now()'));
                    break;
                case 'scheduled':
                    $select->where('l.closed = ?', 1)
                        ->where('l.deleted = ?', 0)
                        ->where('l.start_time > ?', new Expr('now()'));
                    break;
                case 'suspended':
                    $select->where('l.active != ?', 1)
                        ->where('l.approved = ?', 1);
                    break;
                case 'awaiting-approval':
                    $select->where('l.approved = ?', 0);
                    break;
                case 'deleted':
                    $select->where('l.deleted = ?', 1);
                    break;
                case 'sold':
                    $select->join(array('sl' => 'sales_listings'), "sl.listing_id = l.id", 'sl.id AS sale_listing_id')
                        ->join(array('s' => 'sales'), "s.id = sl.sale_id AND s.pending = 0", 's.id AS sale_id')
                        ->order('s.created_at DESC')
                        ->group('l.id');
                    break;

                case 'hpfeat':
                    $select->where('l.hpfeat = ?', 1);
                    break;
                case 'catfeat':
                    $select->where('l.catfeat = ?', 1);
                    break;
                case 'ending-soon':
                    $select->where('l.end_time IS NOT NULL');
                    break;
                case 'popular':
                    $select->where('l.nb_clicks > 0');
                    break;
                case 'other-items':
                    $select->where('l.id != ?', $currentListingId);
                    break;
                case 'bids':
                    $select->join(array('bids' => 'bids'), 'bids.listing_id = l.id', 'MAX(bids.id) AS bid_id')
                        ->order('bids.id DESC')
                        ->group('l.id');
                    break;
                case 'offers':
                    $select->join(array('o' => 'offers'), "o.listing_id = l.id AND o.type='offer'", 'MAX(o.id) AS offer_id')
                        ->order('o.id DESC')
                        ->group('l.id');
                    break;
                case 'pending':
                    $select->join(array('o' => 'offers'), "o.listing_id = l.id AND o.type='offer'", 'o.id AS offer_id')
                        ->joinLeft(array('s' => 'sales_listings'), "s.listing_id = l.id", 's.id AS sale_listing_id')
                        ->where('s.id IS NULL')
                        ->group('l.id');
                    break;
                case 'unsold':
                    $select->joinLeft(array('s' => 'sales_listings'), "s.listing_id = l.id", 's.id AS sale_listing_id')
                        ->where('s.id IS NULL')
                        ->group('l.id');
                    break;
                case 'in-store':
                    $select->where('l.list_in != ?', 'site');
                    break;
                case 'in-site':
                    $select->where('l.list_in != ?', 'store');
                    break;
                case 'active-store':
                    $select->join(array('u' => 'users'), "u.id = l.user_id", 'u.id AS active_store_id')
                        ->where('u.store_active = ?', 1);
                    break;
                case 'recently-viewed':
                    $select->join(array('rvl' => 'recently_viewed_listings'), "rvl.listing_id = l.id", 'rvl.id AS recently_viewed_listings_id')
                        ->order('IF(rvl.updated_at is null, rvl.created_at, rvl.updated_at) DESC')
                        ->group('l.id');

                    if ($loggedInUserId) {
                        $select->where('rvl.user_token = "' . $userToken . '" OR rvl.user_id = "' . $loggedInUserId . '"');
                    }
                    else {
                        $select->where('rvl.user_token = ?', $userToken);
                    }
                    break;
                case 'wish-list':
                    $select->join(array('lw' => 'listings_watch'), "lw.listing_id = l.id", 'lw.id AS listings_watch_id')
                        ->where('l.deleted = ?', 0)
                        ->order('lw.created_at DESC');

                    if ($loggedInUserId) {
                        $select->where('lw.user_token = "' . $userToken . '" OR lw.user_id = "' . $loggedInUserId . '"');
                    }
                    else {
                        $select->where('lw.user_token = ?', $userToken);
                    }
                    break;
            }
        }
        ## /FILTER


        ## CUSTOM FIELDS SEARCH
        $customFieldsService = new CustomFields();

        $customFields = $customFieldsService->getFields(
            array(
                'type'         => 'item',
                'active'       => 1,
                'searchable'   => 1,
                'category_ids' => $categoriesFilter,
            ))->toArray();

        $customFields = array_column($customFields, 'id');

        $aliases = $customFieldsService->getAliases();

        if (is_array($params)) {
            foreach ($params as $key => $value) {
                if (array_key_exists($key, $aliases)) {
                    $key = $aliases[$key];
                }

                if (preg_match('#^(custom_field_)#', $key) && !empty($value)) {
                    $fieldId = str_replace('custom_field_', '', $key);

                    if (in_array($fieldId, $customFields)) {
                        $alias = 'cf' . $fieldId;

                        $customFieldsSelect = null;
                        if (is_string($value)) {
                            if (!empty($value)) {
                                // search using like, just like with keywords search
                                //$customFieldsSelect = "{$alias}.value = '{$value}'"; OBSOLETE
                                $value = explode(' ', $value);
                                $customFieldsSelect = array();
                                foreach ((array)$value as $val) {
                                    $customFieldsSelect[] = "{$alias}.value LIKE '%{$val}%'";
                                }
                                $customFieldsSelect = implode(' OR ', $customFieldsSelect);
                            }
                        }
                        else if (is_array($value)) {
                            $checkBoxSrc = array();
                            $radioSrc = array();
                            foreach ($value as $val) {
                                if (!empty($val)) {
                                    $checkBoxSrc[] = $val;
                                    $radioSrc[] = "{$alias}.value = '{$val}'";
                                }
                            }
                            if (count($checkBoxSrc) > 0) {
                                $customFieldsSelect = "{$alias}.value REGEXP '\"" . implode('"|"',
                                        array_unique($checkBoxSrc)) . "\"' OR "
                                    . implode(' OR ', $radioSrc);
                            }
                        }

                        if (!empty($customFieldsSelect)) {
                            $select->join(array($alias => 'custom_fields_data'),
                                "{$alias}.owner_id = l.id AND {$alias}.field_id = '" . (int)$fieldId . "' AND ({$customFieldsSelect})",
                                $alias . '.id AS ' . $alias . '_id');
                        }
                    }
                }
            }
        }

        ## /CUSTOM FIELDS SEARCH


        ## SORT
        // all data sorting is done here
        switch ($sort) {
            case 'price_asc':
                $select->order(new Expr("IF(l.listing_type='auction', IF(max(b.amount) is null, l.start_price, max(b.amount)), l.buyout_price) ASC"));
                break;
            case 'price_desc':
                $select->order(new Expr("IF(l.listing_type='auction', IF(max(b.amount) is null, l.start_price, max(b.amount)), l.buyout_price) DESC"));
                break;
            case 'started_asc':
                $select->order('l.start_time ASC');
                break;
            case 'started_desc':
                $select->order('l.start_time DESC');
                break;
            case 'ending_asc':
                // @7.8: nulls last
                $select->order('-l.end_time DESC');
                break;
            case 'ending_desc':
                $select->order('l.end_time DESC');
                break;
            case 'clicks_asc':
                $select->order('l.nb_clicks ASC');
                break;
            case 'clicks_desc':
                $select->order('l.nb_clicks DESC');
                break;
            case 'relevance':
                $select->order('l.nb_clicks DESC');
                break;
            case 'rand':
                $select->order(new Expr('rand()'));
                break;
            default:
                if (!$select->getPart('order')) {
                    $select->order('l.created_at DESC');
                }
                break;
        }

        ## /SORT


        return $select;
    }

    /**
     *
     * get the custom fields data of a certain listing
     *
     * @param integer $id
     *
     * @return array
     */
    public function getCustomFieldsData($id)
    {
        $result = array();

        // custom fields data
        $rowset = $this->getCustomFieldsDataService()->fetchAll(
            $this->getCustomFieldsDataService()->getTable()->select('value, field_id')
                ->where('type = ?', self::CUSTOM_FIELDS_TYPE)
                ->where('owner_id = ?', (int)$id));

        foreach ($rowset as $row) {
            $result[$row['field_id']] = \Ppb\Utility::unserialize($row['value']);
        }

        return $result;
    }

    /**
     *
     * prepare listing data for when saving to the table
     * if listing is scheduled, 'closed' = 1
     *
     * important: the daylight saving changes will automatically be calculated when setting the end time!
     * @7.9: if we have an unlimited duration set, then the duration field is set to 0, and if we have a custom end
     * time set then the duration field is set as null
     *
     * @param array $data
     *
     * @return array
     */
    protected function _prepareSaveData($data = array())
    {
        if (isset($data['id']) && empty($data['id'])) {
            unset($data['id']);
        }

        if (isset($data['closing'])) {
            unset($data['closing']);
        }

        if (isset($data['addl_category_id']) && empty($data['addl_category_id'])) {
            $data['addl_category_id'] = new Expr('null');
        }

        if (!empty($data['buyout_price']) && $data['listing_type'] == 'product') {
            $data['start_price'] = $data['buyout_price'];
        }

        $keysToUnset = array('rollback_data', 'active', 'approved', 'closed', 'deleted', 'nb_clicks');
        foreach ($keysToUnset as $keyToUnset) {
            if (array_key_exists($keyToUnset, $data)) {
                unset($data[$keyToUnset]);
            }
        }

        $startTime = time();
        if (isset($data['start_time_type'])) {
            switch ($data['start_time_type']) {
                case 1: // custom
                    $startTime = strtotime($data['start_time']);
                    $data['start_time'] = date('Y-m-d H:i:s', $startTime);
                    $data['closed'] = 1;
                    break;
                default: // now
                    $data['start_time'] = new Expr('now()');
                    break;
            }
        }
        else if (isset($data['start_time'])) {
            $startTime = strtotime($data['start_time']);
        }

        $endTime = null;

        $endTimeType = isset($data['end_time_type']) ? $data['end_time_type'] : 0;
        switch ($endTimeType) {
            case 1: // custom
                $endTime = strtotime($data['end_time']);
                $data['duration'] = new Expr('null');
                break;
            default: // duration
                // the duration field when using the duration option must be NOT NULL
                $data['duration'] = (isset($data['duration'])) ? $data['duration'] : 0;
                if ($data['duration'] > 0) {
                    $endTime = $startTime + $data['duration'] * 86400;
                }
                break;
        }

        if ($endTime) {
            $data['end_time'] = date('Y-m-d H:i:s', $endTime);
        }
        else {
            $data['end_time'] = new Expr('null');
        }

        if (isset($data['tax_type_id']) && empty($data['tax_type_id'])) {
            $data['tax_type_id'] = new Expr('null');
        }

        if (!empty($data['stock_levels']) && is_array($data['stock_levels'])) {
            foreach ($data['stock_levels'] as $key => $value) {
                if (!empty($value[StockLevels::FIELD_OPTIONS])) {
                    $data['stock_levels'][$key][StockLevels::FIELD_OPTIONS] = \Ppb\Utility::unserialize($value[StockLevels::FIELD_OPTIONS]);
                }

                if (!empty($value[StockLevels::FIELD_QUANTITY])) {
                    $data['stock_levels'][$key][StockLevels::FIELD_QUANTITY] = abs(intval($value[StockLevels::FIELD_QUANTITY]));
                }
            }
        }

        return parent::_prepareSaveData($data);
    }

    /**
     *
     * return the approved flag that needs to be set for a certain listing
     * if the admin edits a listing, that listing will always be approved
     *
     * @return integer                  1 if approved, 0 otherwise
     */
    protected function _setApprovedFlag()
    {
        $user = $this->getUser();

        if (!empty($user['id'])) {
            $settings = $this->getSettings();
            if ($settings['enable_listings_approval']) {
                return 0;
            }
            else if ($user['listing_approval']) {
                return 0;
            }
        }

        return 1;
    }

    /**
     *
     * check if variable exists and is not null in params array
     *
     * @param string $key
     *
     * @return mixed|null
     */
    protected function _getParam($key)
    {
        $params = $this->getSelectParams();

        if (isset($params[$key])) {
            return $params[$key];
        }

        return null;
    }

}
